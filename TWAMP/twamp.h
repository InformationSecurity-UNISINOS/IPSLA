/*
 * Name: Emma Mirică
 * Project: TWAMP Protocol
 * Class: OSS
 * Email: emma.mirica@cti.pub.ro
 *
 * Source: twamp.h
 * Note: contains the definition of the packets and other
 * structures relevant to the protocol.
 *
 */

/*
 * The following logical-model will be implemented:
 *
 * +----------------+                   +-------------------+
 * | Control-Client |<--TWAMP-Control-->| Server            |
 * |                |                   |                   |
 * | Session-Sender |<--TWAMP-Test----->| Session-Reflector |
 * +----------------+                   +-------------------+
 *
 */

#ifndef _TWAMP_H__
#define _TWAMP_H__

#include <inttypes.h>
#include <sys/time.h>

#define REFWAIT 900             /* seconds */
#define SERVER_PORT 862
#define CHECK_TIMES 100

enum CommandNumber {
    kReserved0,
    kForbidden,
    kStartSessions,
    kStopSessions,
    kReserved4,
    kRequestTWSession,
    kExperimentation
};

enum Mode {
    kModeUnauthenticated = 1,
    kModeAuthenticated = 2,
    kModeEncrypted = 4,
    kModeHybrid = 8             /* Unauthenticated test, encrypted control */
};

enum AcceptCode {
    kOK,
    kFailure,
    kInternalError,
    kAspectNotSupported,
    kPermanentResourceLimitation,
    kTemporaryResourceLimitation
};

/* TWAMP timestamp is NTP time (RFC1305).
 * Should be in network byte order!      */
typedef struct twamp_timestamp {
    uint32_t integer;
    uint32_t fractional;
} TWAMPTimestamp;

/*****************************************/
/*                                       */
/* TWAMP-Control specific messages       */
/*                                       */
/*****************************************/

/* First messsage sent by the Server to the
 * Control-Client to establish a connection */
typedef struct server_greeting {
    uint8_t Unused[12]; //Conforme
    /* Modes = bit-wise OR between Mode values
     * First 29 bits MUST be zero */
    uint32_t Modes; //Conforme
    uint8_t Challenge[16]; //Conforme     /* Random sequence of bytes generated by the server */
    uint8_t Salt[16]; //Conforme
    uint32_t Count; //NC: deveria ser uma uint8_t            /* MUST be a power of 2. Minimum 1024 */
    uint8_t MBZ[12]; //Conforme
} ServerGreeting;

/* The Control-Client's response to the Server's greeting */
typedef struct control_client_greeting_response {
    uint32_t Mode; //Conforme             /* if 0 -> the Server does not wish to communicate */
    uint8_t KeyID[80]; //Conforme
    uint8_t Token[64]; //Conforme
    uint8_t ClientIV[16]; //Conforme
} SetUpResponse;

/* The Server sends a start message to conclude the TWAMP-Control session */
typedef struct server_start {
    uint8_t MBZ1[15]; //Conforme
    uint8_t Accept; //Conforme            /* 0 means Continue. See 3.3 of RFC 4656 */
    uint8_t ServerIV[16]; //Conforme
    TWAMPTimestamp StartTime; //Conforme  /* TWAMPTimestamp; 0 if Accept is NonZero. */
    uint8_t MBZ2[8]; //Conforme
} ServerStart;

/* The Control-Client sends a RequestSession packet for each TWAMP-Test session */
typedef struct request_session {
    uint8_t Type; //Conforme              /* 5 / CommandNumber */
    uint8_t IPVN; //Conforme              /* MBZ | IPVN */
    uint8_t ConfSender; //Conforme         /* 0 */
    uint8_t ConfReceiver; //Conforme      /* 0 */
    uint32_t SlotsNo; //Conforme          /* 0 */
    uint32_t PacketsNo; //Conforme        /* 0 */
    uint16_t SenderPort; //Conforme
    uint16_t ReceiverPort; //Conforme
    uint32_t SenderAddress; //Conforme
    uint8_t MBZ1[12]; //Conforme          /* Sender Address Cont */
    uint32_t ReceiverAddress; //Conforme
    uint8_t MBZ2[12]; //Conforme          /* Receiver Address Cont */
    uint8_t SID[16]; //Conforme            /* 0 */
    uint32_t PaddingLength; //Conforme
    TWAMPTimestamp StartTime; //Conforme
    TWAMPTimestamp Timeout; //Deveria ser uint8_t[8]
    uint32_t TypePDescriptor; //Conforme
    uint8_t MBZ3[8]; //Conforme
    uint8_t HMAC[16]; //Conforme
} RequestSession;

/* The Server's response to the RequestSession packet */
typedef struct accept_session_packet {
    uint8_t Accept; //Conforme            /* 3 if not supported */
    uint8_t MBZ1; //Conforme
    uint16_t Port; //Conforme
    uint8_t SID[16]; //Conforme
    uint8_t MBZ2[12]; //Conforme
    uint8_t HMAC[16]; //Conforme
} AcceptSession;

/* The Control-Client sends a StartSessions message to start all accepted
 * TWAMP-Test sessions */
typedef struct start_message1 {
    uint8_t Type;   //Conforme            /* 2 */
    uint8_t MBZ[15]; //Conforme
    uint8_t HMAC[16]; //Conforme
} StartSessions;

/* When it receives a StartSessions, the Server responds with a StartACK */
typedef struct start_ack {
    uint8_t Accept; //Conforme
    uint8_t MBZ[15]; //Conforme
    uint8_t HMAC[16]; //Conforme
} StartACK;

/* The Control-Client sends a StopSessions message to stop all active
 * TWAMP-Test sessions */
typedef struct twamp_stop {
    uint8_t Type; //Conforme              /* 3 */
    uint8_t Accept; //Conforme
    uint8_t MBZ1[2]; //Sem definição de tamanho na RFC - checar com Nobre
    uint32_t SessionsNo; //Conforme
    uint8_t MBZ2[8]; //Conforme
    uint8_t HMAC[16]; //Não está presente na RFC - checar com Nobre
} StopSessions;

/*****************************************/
/*                                       */
/* TWAMP-Test specific messages          */
/*                                       */
/*****************************************/

#define TST_PKT_SIZE 512

/* Session-Sender TWAMP-Test packet for Unauthenticated mode */
typedef struct test_packet {
    uint32_t seq_number; //Conforme
    TWAMPTimestamp time; //Conforme
    uint16_t error_estimate; //Conforme
    uint8_t padding[TST_PKT_SIZE-14]; //Conforme
} SenderUPacket;

/* Session-Reflector TWAMP-Test packet for Unauthenticated mode */
typedef struct reflector_unauth_packet {
    uint32_t seq_number; //Conforme
    TWAMPTimestamp time; //Conforme
    uint16_t error_estimate; //Conforme
    uint8_t mbz1[2]; //Conforme
    TWAMPTimestamp receive_time; //Conforme
    uint32_t sender_seq_number; //Conforme
    TWAMPTimestamp sender_time; //Conforme
    uint16_t sender_error_estimate; //Conforme
    uint8_t mbz2[2]; //Conforme
    uint8_t sender_ttl; //Conforme
    uint8_t padding[TST_PKT_SIZE-41]; //Conforme
} ReflectorUPacket;

/* Session-Sender TWAMP-Test packet for Authenticated/Encrypted mode */
/*NÃO SERÁ USADO NESTE TRABALHO*/
typedef struct reflector_auth_packet {
    uint32_t seq_number;
    uint8_t mbz1[12];
    TWAMPTimestamp time;
    uint16_t error_estimate;
    uint8_t mbz2[6];
    TWAMPTimestamp receive_time;
    uint8_t mbz3[8];
    uint32_t sender_seq_number;
    uint8_t mbz4[12];
    TWAMPTimestamp sender_time;
    uint16_t sender_error_estimate;
    uint8_t mbz5[6];
    uint8_t sender_ttl;
    uint8_t mbz6[15];
    uint8_t hmac[16];
} ReflectorAPacket;

/* Session-Reflector TWAMP-Test packet for Authenticated/Encrypted mode */
/*NÃO SERÁ USADO NESTE TRABALHO*/
typedef struct auth_test_packet {
    uint32_t seq_number;
    uint8_t mbz1[12];
    TWAMPTimestamp time;
    uint8_t error_estimate;
    uint8_t mbz2[6];
    uint8_t hmac[16];
    uint8_t padding[57];
} SenderAPacket;

void timeval_to_timestamp(const struct timeval *tv, TWAMPTimestamp *ts);

void timestamp_to_timeval(const TWAMPTimestamp *ts, struct timeval *tv);

TWAMPTimestamp get_timestamp();

int get_actual_shutdown(const struct timeval *tv, const struct timeval *ts, const TWAMPTimestamp *t);

void print_metrics(uint32_t j, uint16_t port, const ReflectorUPacket *pack);

#endif                          // _TWAMP_H__
